#dodawanie projektu POST na /projects
#podajemy tez id osoby ktora ma byc project ownerem
{
	"name":"project name A",
	"description" : "project description ",
	"ownerId" : "1"
}
#usuwanie projektu DELETE na /projects/{projectId}
#pobieranie projektu GET na /projects lub GET na /projects/{id}
#aktualizacja projektu PATCH na /projects/{projectsId}
{
	"name":"new project name ",
	"description" : "new project description "
}
#jesli w PATCH na projects/{projectId} podamy nowe userId
to zmienimy w danym projekcie project ownera
#np tu zmieniamy na tego o id 2
{
	"ownerId" : "2"
}
#GET na users/withManagedProjects/{userId}
zwroci projekty w ktorch project ownerem jest user o danym userId

#dodawanie grupy POST na /groups
{
	"name" : "first group"
}
# aktualizacja grupy PATCH na /groups/{groupId}
{
	"name" : "new name"
}
#dodawanie usera do grupy
#PATCH na /groups/{groupId}
{
	"userId":"1"
}
#usuniecie usera z grupy 
#DELETE na /groups/removeUser i podajemy w parametrach userId oraz groupId
#np: /groups/removeUser?userId=1&groupId=1
# nie usunie to usera a jedynie usunie go z grupy,zatem mozna mu pozniej przypisac inna grupe

#pobranie grupy wraz z jej czlonkami
#GET na /groups/withUsers/{groupId}
#usuniecie danej grupy(nie spowoduje usuniecia z niej userow - mozna dodac ich do innej grupy)
#DELETE na groups/{groupId}
#pobranie grupy wraz z tablicami na ktorych pracuje
# GET na groups/withTables/{groupId}

#dodanie tabeli wraz z groupId oraz projectId
# POST na /tables/
{
	"name" :  "first table",
	"groupId" : "1",
	"projectId" : "1"
}

#aktualizacja danej tabeli
# w celu unikniecia  bledow nalezy podac groupId oraz projectId nawet jesli zmieniamy tylko jedno z nich
# PATCH na tables/{tableId}
{
	"name" :  "new table",
	"groupId" : "2",
	"projectId" : "2"
}
#usuniecie tabeli
#DELETE na /tables/{tableId}
#pobranie tabelie GET na tables/ lub GET na tables/{tableId}


